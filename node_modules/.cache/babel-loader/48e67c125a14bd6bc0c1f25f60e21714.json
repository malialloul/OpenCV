{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nexport const addUser = async (username, password) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: uuidv4(),\n      username: username,\n      password: password\n    })\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(response => response.json());\n};\nexport const updateSettings = async id => {\n  let settings = {};\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n  }\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      settings\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\" + id, requestOptions).then(response => response.json());\n};\nexport const addUserSettings = async id => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      sectionIndex: \"\",\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      }\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(response => response.json());\n};\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then(response => response.json());\n};\nexport const getUserDetails = async userId => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then(response => response.json());\n};\nexport const getUserSettings = async userId => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(response => response.json());\n};\nexport const getUserInfo = async userId => {\n  let user = {\n    userDetails: {},\n    userSettings: {}\n  };\n  await getUserDetails(userId).then(response => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then(response => {\n    user.userSettings = response;\n  });\n  return user;\n};","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/HTTPContext.ts"],"names":["v4","uuidv4","addUser","username","password","requestOptions","method","headers","Accept","body","JSON","stringify","id","fetch","then","response","json","updateSettings","settings","userInfoStorage","sessionStorage","getItem","parse","userSettings","addUserSettings","templateIndex","sectionIndex","personal_details","text","fontSize","textPosition","textColor","education","sections","experience","projects","languages","contact","getUsers","getUserDetails","userId","getUserSettings","getUserInfo","user","userDetails"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GlobalContext } from \"./AppContext\";\n\nexport const addUser = async (username: string, password: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: uuidv4(),\n      username: username,\n      password: password,\n    }),\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const updateSettings = async (id: string) => {\n  let settings = {};\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n  }\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      settings,\n    }),\n  };\n  return await fetch(\n    \"http://localhost:8000/settings/\" + id,\n    requestOptions\n  ).then((response) => response.json());\n};\n\nexport const addUserSettings = async (id: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      sectionIndex: \"\",\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n    }),\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserDetails = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserSettings = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserInfo = async (userId: string) => {\n  let user = {\n    userDetails: {},\n    userSettings: {},\n  };\n\n  await getUserDetails(userId).then((response) => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then((response) => {\n    user.userSettings = response;\n  });\n  return user;\n};\n"]},"metadata":{},"sourceType":"module"}