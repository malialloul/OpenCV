{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nexport const addUser = async (username, password, email, token, verified) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(response => response.json());\n};\nexport const addTemplate = async (userID, templateIndex, templateName) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    userID: userID,\n    templateIndex: templateIndex,\n    templateName: templateName\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  await addTemplateSettings(id);\n  return await fetch(\"http://localhost:8000/templates/\", requestOptions).then(response => JSON.stringify(body));\n};\nexport const updateUser = async (id, username, password, email, token, verified) => {\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified\n  };\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/users/\" + id, requestOptions).then(response => response.json());\n};\nexport const updateTemplate = async body => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/templates/\" + body.id, requestOptions).then(response => response.json());\n};\nexport const deleteTemplate = async id => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  await deleteSettings(id);\n  return await fetch(\"http://localhost:8000/templates/\" + id, requestOptions).then(response => response.json());\n};\nexport const deleteSettings = async templateId => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return await fetch(\"http://localhost:8000/templates/templateId=\" + templateId, requestOptions).then(response => response.json());\n};\nexport const updateSettings = async id => {\n  const settings = sessionStorage.getItem(\"settings\");\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(settings)\n  };\n  return await fetch(\"http://localhost:8000/settings/\" + id, requestOptions).then(response => console.log(response.json()));\n};\nexport const addTemplateSettings = async templateId => {\n  const id = uuidv4();\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      templateId: templateId,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        info: {\n          phoneNumber: \"\",\n          email: \"\"\n        },\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      }\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(response => response.json());\n};\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then(response => response.json());\n};\nexport const getUserDetails = async userId => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then(response => response.json());\n};\nexport const getUserTemplates = async userId => {\n  return await fetch(\"http://localhost:8000/templates?userID=\" + userId).then(response => response.json());\n};\nexport const getTemplateSettings = async templateId => {\n  return await fetch(\"http://localhost:8000/settings?templateId=\" + templateId).then(response => response.json());\n};\nexport const getUserSettings = async userId => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(response => response.json());\n};\nexport const getUserInfo = async userId => {\n  let user = {\n    userDetails: {},\n    userTemplates: []\n  };\n  await getUserDetails(userId).then(response => {\n    user.userDetails = response;\n  });\n  await getUserTemplates(userId).then(response => {\n    user.userTemplates = response;\n  });\n  return user;\n};","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/HTTPContext.ts"],"names":["v4","uuidv4","addUser","username","password","email","token","verified","id","body","requestOptions","method","headers","Accept","JSON","stringify","fetch","then","response","json","addTemplate","userID","templateIndex","templateName","addTemplateSettings","updateUser","updateTemplate","deleteTemplate","deleteSettings","templateId","updateSettings","settings","sessionStorage","getItem","console","log","personal_details","text","fontSize","textPosition","textColor","education","sections","experience","skills","projects","languages","contact","info","phoneNumber","getUsers","getUserDetails","userId","getUserTemplates","getTemplateSettings","getUserSettings","getUserInfo","user","userDetails","userTemplates"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GlobalContext } from \"./AppContext\";\n\nexport const addUser = async (\n  username: string,\n  password: string,\n  email: string,\n  token: string,\n  verified: boolean\n) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified,\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const addTemplate = async (\n  userID: string,\n  templateIndex: string,\n  templateName: string\n) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    userID: userID,\n    templateIndex: templateIndex,\n    templateName: templateName,\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  await addTemplateSettings(id);\n  return await fetch(\"http://localhost:8000/templates/\", requestOptions).then(\n    (response) => JSON.stringify(body)\n  );\n};\n\nexport const updateUser = async (\n  id: string,\n  username: string,\n  password: string,\n  email: string,\n  token: string,\n  verified: boolean\n) => {\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified,\n  };\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\"http://localhost:8000/users/\" + id, requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const updateTemplate = async (body: any) => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\n    \"http://localhost:8000/templates/\" + body.id,\n    requestOptions\n  ).then((response) => response.json());\n};\n\nexport const deleteTemplate = async (id: any) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  await deleteSettings(id);\n\n  return await fetch(\n    \"http://localhost:8000/templates/\" + id,\n    requestOptions\n  ).then((response) => response.json());\n};\n\nexport const deleteSettings = async (templateId: any) => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  return await fetch(\n    \"http://localhost:8000/templates/templateId=\" + templateId,\n    requestOptions\n  ).then((response) => response.json());\n};\n\nexport const updateSettings = async (id: string) => {\n  const settings = sessionStorage.getItem(\"settings\");\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(settings),\n  };\n  return await fetch(\n    \"http://localhost:8000/settings/\" + id,\n    requestOptions\n  ).then((response) => console.log(response.json()));\n};\n\nexport const addTemplateSettings = async (templateId: string) => {\n  const id = uuidv4();\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      templateId: templateId,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        info: {\n          phoneNumber: \"\",\n          email: \"\",\n        },\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n    }),\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserDetails = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserTemplates = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/templates?userID=\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getTemplateSettings = async (templateId: string) => {\n  return await fetch(\n    \"http://localhost:8000/settings?templateId=\" + templateId\n  ).then((response) => response.json());\n};\n\nexport const getUserSettings = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserInfo = async (userId: string) => {\n  let user = {\n    userDetails: {},\n    userTemplates: [],\n  };\n\n  await getUserDetails(userId).then((response) => {\n    user.userDetails = response;\n  });\n\n  await getUserTemplates(userId).then((response) => {\n    user.userTemplates = response;\n  });\n  return user;\n};\n"]},"metadata":{},"sourceType":"module"}