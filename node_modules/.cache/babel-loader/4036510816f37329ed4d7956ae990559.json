{"ast":null,"code":"var _jsxFileName = \"/home/ma/git/OpenCV/src/services/AppContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"../services/AppReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetUserInfo = () => {\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  let userInfo = {\n    userDetails: {\n      id: \"\",\n      username: \"\",\n      email: \"\"\n    },\n    userSettings: {\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      templateIndex: 0,\n      published: false\n    }\n  };\n\n  if (userInfoStorage !== null) {\n    userInfo = JSON.parse(userInfoStorage);\n  }\n\n  return userInfo;\n};\n\n_c = GetUserInfo;\nconst initialState = {\n  data: {\n    userDetails: GetUserInfo().userDetails,\n    userSettings: GetUserInfo().userSettings,\n    sectionIndex: \"\",\n    settingsModal: false\n  }\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initialState);\n\nconst GlobalProvider = ({ ...props\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  const updateData = item => {\n    dispatch({\n      type: \"UPDATE_DATA\",\n      payload: item\n    });\n  };\n\n  const updateIndex = item => {\n    dispatch({\n      type: \"UPDATE_SECTION_INDEX\",\n      payload: item\n    });\n  };\n\n  const updateTempIndex = item => {\n    dispatch({\n      type: \"UPDATE_TEMPLATE_INDEX\",\n      payload: item\n    });\n  };\n\n  const updateSettingsModal = () => {\n    dispatch({\n      type: \"UPDATE_SETTINGS_MODAL\",\n      payload: !state.data.settingsModal\n    });\n  };\n\n  const updateUserSettings = item => {\n    dispatch({\n      type: \"UPDATE_USER_SETTINGS\",\n      payload: item\n    });\n  };\n\n  const updateUserDetails = item => {\n    dispatch({\n      type: \"UPDATE_USER_DETAILS\",\n      payload: item\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      data: state.data,\n      updateData,\n      updateIndex,\n      updateSettingsModal,\n      updateTempIndex,\n      updateUserSettings,\n      updateUserDetails\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c2 = GlobalProvider;\nexport default GlobalProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetUserInfo\");\n$RefreshReg$(_c2, \"GlobalProvider\");","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/AppContext.tsx"],"names":["React","createContext","useReducer","AppReducer","GetUserInfo","userInfoStorage","sessionStorage","getItem","userInfo","userDetails","id","username","email","userSettings","personal_details","text","settings","fontSize","textPosition","textColor","education","sections","experience","projects","languages","contact","templateIndex","published","JSON","parse","initialState","data","sectionIndex","settingsModal","GlobalContext","GlobalProvider","props","state","dispatch","updateData","item","type","payload","updateIndex","updateTempIndex","updateSettingsModal","updateUserSettings","updateUserDetails","children"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport CommonFuntions from \"./CommonFunctions\";\nimport AppReducer from \"../services/AppReducer\";\n\nconst GetUserInfo = () => {\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  let userInfo = {\n    userDetails: { id: \"\", username: \"\", email:\"\" },\n    userSettings: {\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      templateIndex: 0,\n      published: false\n    },\n  };\n  if (userInfoStorage !== null) {\n    userInfo = JSON.parse(userInfoStorage);\n  }\n  return userInfo;\n};\n\nconst initialState = {\n  data: {\n    userDetails: GetUserInfo().userDetails,\n    userSettings: GetUserInfo().userSettings,\n    sectionIndex: \"\",\n    settingsModal: false,\n  },\n} as {\n  data: any;\n  updateData: (item: any) => void;\n  updateIndex: (item: string) => void;\n  updateSettingsModal: () => void;\n  updateTempIndex: (item: number) => void;\n  updateUserSettings: (item: any) => void;\n  updateUserDetails: (item: any) => void;\n};\n\nexport const GlobalContext = createContext(initialState);\n\nconst GlobalProvider = ({ ...props }: any) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const updateData = (item: any) => {\n    dispatch({\n      type: \"UPDATE_DATA\",\n      payload: item,\n    });\n  };\n  const updateIndex = (item: any) => {\n    dispatch({\n      type: \"UPDATE_SECTION_INDEX\",\n      payload: item,\n    });\n  };\n  const updateTempIndex = (item: number) => {\n    dispatch({\n      type: \"UPDATE_TEMPLATE_INDEX\",\n      payload: item,\n    });\n  };\n  const updateSettingsModal = () => {\n    dispatch({\n      type: \"UPDATE_SETTINGS_MODAL\",\n      payload: !state.data.settingsModal,\n    });\n  };\n\n  const updateUserSettings = (item: any) => {\n    dispatch({\n      type: \"UPDATE_USER_SETTINGS\",\n      payload: item,\n    });\n  };\n\n  const updateUserDetails = (item: any) => {\n    dispatch({\n      type: \"UPDATE_USER_DETAILS\",\n      payload: item,\n    });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        data: state.data,\n        updateData,\n        updateIndex,\n        updateSettingsModal,\n        updateTempIndex,\n        updateUserSettings,\n        updateUserDetails,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\nexport default GlobalProvider;\n"]},"metadata":{},"sourceType":"module"}