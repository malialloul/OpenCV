{"ast":null,"code":"var _jsxFileName = \"/home/ma/git/OpenCV/src/services/AppContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppReducer from \"../services/AppReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GetUserInfo = () => {\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  let userInfo = {\n    id: \"\",\n    username: \"\"\n  };\n\n  if (userInfoStorage !== null) {\n    userInfo = JSON.parse(userInfoStorage);\n  }\n\n  console.log(userInfo);\n  return userInfo;\n};\n\n_c = GetUserInfo;\nconst initialState = {\n  data: GetUserInfo()\n};\nexport const GlobalContext = /*#__PURE__*/createContext(initialState);\n\nconst GlobalProvider = ({ ...props\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  const updateData = item => {\n    dispatch({\n      type: \"UPDATE_DATA\",\n      payload: item\n    });\n  };\n\n  const updateIndex = item => {\n    dispatch({\n      type: \"UPDATE_SECTION_INDEX\",\n      payload: item\n    });\n  };\n\n  const updateTempIndex = item => {\n    dispatch({\n      type: \"UPDATE_TEMPLATE_INDEX\",\n      payload: item\n    });\n  };\n\n  const updateSettingsModal = () => {\n    dispatch({\n      type: \"UPDATE_SETTINGS_MODAL\",\n      payload: !state.data.settingsModal\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      data: state.data,\n      updateData,\n      updateIndex,\n      updateSettingsModal,\n      updateTempIndex\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c2 = GlobalProvider;\nexport default GlobalProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetUserInfo\");\n$RefreshReg$(_c2, \"GlobalProvider\");","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/AppContext.tsx"],"names":["React","createContext","useReducer","AppReducer","GetUserInfo","userInfoStorage","sessionStorage","getItem","userInfo","id","username","JSON","parse","console","log","initialState","data","GlobalContext","GlobalProvider","props","state","dispatch","updateData","item","type","payload","updateIndex","updateTempIndex","updateSettingsModal","settingsModal","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;;;AAGA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,eAAe,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAxB;AACA,MAAIC,QAAQ,GAAG;AAAEC,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,QAAQ,EAAE;AAApB,GAAf;;AACA,MAAIL,eAAe,KAAK,IAAxB,EAA8B;AAC5BG,IAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWP,eAAX,CAAX;AACD;;AACDQ,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AAEA,SAAOA,QAAP;AACD,CATD;;KAAMJ,W;AAWN,MAAMW,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAEZ,WAAW;AADE,CAArB;AAUA,OAAO,MAAMa,aAAa,gBAAGhB,aAAa,CAACc,YAAD,CAAnC;;AAEP,MAAMG,cAAc,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAuB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,UAAU,CAACC,UAAD,EAAaY,YAAb,CAApC;;AACA,QAAMO,UAAU,GAAIC,IAAD,IAAe;AAChCF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAMA,QAAMG,WAAW,GAAIH,IAAD,IAAe;AACjCF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAMA,QAAMI,eAAe,GAAIJ,IAAD,IAAkB;AACxCF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,uBADC;AAEPC,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GALD;;AAMA,QAAMK,mBAAmB,GAAG,MAAM;AAChCP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,uBADC;AAEPC,MAAAA,OAAO,EAAE,CAACL,KAAK,CAACJ,IAAN,CAAWa;AAFd,KAAD,CAAR;AAID,GALD;;AAOA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,IAAI,EAAEI,KAAK,CAACJ,IADP;AAELM,MAAAA,UAFK;AAGLI,MAAAA,WAHK;AAILE,MAAAA,mBAJK;AAKLD,MAAAA;AALK,KADT;AAAA,cASGR,KAAK,CAACW;AATT;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAxCD;;GAAMZ,c;;MAAAA,c;AAyCN,eAAeA,cAAf","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport CommonFuntions from \"../components/CommonFunctions\";\nimport AppReducer from \"../services/AppReducer\";\n\n\nconst GetUserInfo = () => {\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  let userInfo = { id: \"\", username: \"\" };\n  if (userInfoStorage !== null) {\n    userInfo = JSON.parse(userInfoStorage);\n  }\n  console.log(userInfo);\n\n  return userInfo;\n};\n\nconst initialState = {\n  data: GetUserInfo(),\n} as {\n  data: any;\n  updateData: (item: any) => void;\n  updateIndex: (item: string) => void;\n  updateSettingsModal: () => void;\n  updateTempIndex: (item: number) => void;\n};\n\nexport const GlobalContext = createContext(initialState);\n\nconst GlobalProvider = ({ ...props }: any) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  const updateData = (item: any) => {\n    dispatch({\n      type: \"UPDATE_DATA\",\n      payload: item,\n    });\n  };\n  const updateIndex = (item: any) => {\n    dispatch({\n      type: \"UPDATE_SECTION_INDEX\",\n      payload: item,\n    });\n  };\n  const updateTempIndex = (item: number) => {\n    dispatch({\n      type: \"UPDATE_TEMPLATE_INDEX\",\n      payload: item,\n    });\n  };\n  const updateSettingsModal = () => {\n    dispatch({\n      type: \"UPDATE_SETTINGS_MODAL\",\n      payload: !state.data.settingsModal,\n    });\n  };\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        data: state.data,\n        updateData,\n        updateIndex,\n        updateSettingsModal,\n        updateTempIndex,\n      }}\n    >\n      {props.children}\n    </GlobalContext.Provider>\n  );\n};\nexport default GlobalProvider;\n"]},"metadata":{},"sourceType":"module"}