{"ast":null,"code":"import { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GlobalContext } from \"./AppContext\";\nconst {\n  data\n} = useContext(GlobalContext);\nexport const addUser = async (username, password) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: uuidv4(),\n      username: username,\n      password: password\n    })\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(response => response.json());\n};\nexport const updateSettings = async id => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      ...data.userSettings\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\" + id, requestOptions).then(response => response.json());\n};\nexport const addUserSettings = async id => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      sectionIndex: \"\",\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      }\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(response => response.json());\n};\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then(response => response.json());\n};\nexport const getUserDetails = async userId => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then(response => response.json());\n};\nexport const getUserSettings = async userId => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(response => response.json());\n};\nexport const getUserInfo = async userId => {\n  let user = {\n    userDetails: {},\n    userSettings: {}\n  };\n  await getUserDetails(userId).then(response => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then(response => {\n    user.userSettings = response;\n  });\n  return user;\n};","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/HTTPContext.ts"],"names":["useContext","v4","uuidv4","GlobalContext","data","addUser","username","password","requestOptions","method","headers","Accept","body","JSON","stringify","id","fetch","then","response","json","updateSettings","userSettings","addUserSettings","templateIndex","sectionIndex","personal_details","text","settings","fontSize","textPosition","textColor","education","sections","experience","projects","languages","contact","getUsers","getUserDetails","userId","getUserSettings","getUserInfo","user","userDetails"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GlobalContext } from \"./AppContext\";\n\nconst { data } = useContext(GlobalContext);\n\nexport const addUser = async (username: string, password: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: uuidv4(),\n      username: username,\n      password: password,\n    }),\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const updateSettings = async (id: string) => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      ...data.userSettings,\n    }),\n  };\n  return await fetch(\n    \"http://localhost:8000/settings/\" + id,\n    requestOptions\n  ).then((response) => response.json());\n};\n\nexport const addUserSettings = async (id: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      sectionIndex: \"\",\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n    }),\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserDetails = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserSettings = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserInfo = async (userId: string) => {\n  let user = {\n    userDetails: {},\n    userSettings: {},\n  };\n\n  await getUserDetails(userId).then((response) => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then((response) => {\n    user.userSettings = response;\n  });\n  return user;\n};\n"]},"metadata":{},"sourceType":"module"}