{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nexport const addUser = async (username, password, email, token, verified) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  await fetch(\"http://localhost:8000/users/\", requestOptions).then(() => {\n    return JSON.stringify(body);\n  });\n};\nexport const updateSettings = async () => {\n  let settings = {};\n  let id = \"\";\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n    id = JSON.parse(userInfoStorage).userDetails.id;\n  }\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(settings)\n  };\n  return await fetch(\"http://localhost:8000/settings/\" + id, requestOptions).then(response => console.log(response.json()));\n};\nexport const addUserSettings = async id => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      published: false,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      }\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(response => response.json());\n};\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then(response => response.json());\n};\nexport const getUserDetails = async userId => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then(response => response.json());\n};\nexport const getUserSettings = async userId => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(response => response.json());\n};\nexport const getUserInfo = async userId => {\n  let user = {\n    userDetails: {},\n    userSettings: {\n      templateIndex: 0\n    }\n  };\n  await getUserDetails(userId).then(response => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then(response => {\n    user.userSettings = response;\n  });\n  return user;\n};","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/HTTPContext.ts"],"names":["v4","uuidv4","addUser","username","password","email","token","verified","id","body","requestOptions","method","headers","Accept","JSON","stringify","fetch","then","updateSettings","settings","userInfoStorage","sessionStorage","getItem","parse","userSettings","userDetails","response","console","log","json","addUserSettings","templateIndex","published","personal_details","text","fontSize","textPosition","textColor","education","sections","experience","skills","projects","languages","contact","getUsers","getUserDetails","userId","getUserSettings","getUserInfo","user"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const addUser = async (\n  username: string,\n  password: string,\n  email: string,\n  token: string,\n  verified: boolean\n) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified,\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  await fetch(\"http://localhost:8000/users/\", requestOptions).then(() => {\n    return JSON.stringify(body);\n  });\n};\n\nexport const updateSettings = async () => {\n  let settings = {};\n  let id = \"\";\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n    id = JSON.parse(userInfoStorage).userDetails.id;\n  }\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(settings),\n  };\n  return await fetch(\n    \"http://localhost:8000/settings/\" + id,\n    requestOptions\n  ).then((response) => console.log(response.json()));\n};\n\nexport const addUserSettings = async (id: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      published: false,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n    }),\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserDetails = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserSettings = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserInfo = async (userId: string) => {\n  let user = {\n    userDetails: {},\n    userSettings: { templateIndex: 0 },\n  };\n\n  await getUserDetails(userId).then((response) => {\n    user.userDetails = response;\n  });\n  await getUserSettings(userId).then((response) => {\n    user.userSettings = response;\n  });\n  return user;\n};\n"]},"metadata":{},"sourceType":"module"}