{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nexport const addUser = async (username, password, email, token, verified) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(response => response.json());\n};\nexport const addTemplate = async (userID, templateIndex) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    userID: userID,\n    templateIndex: templateIndex\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/templates/\", requestOptions).then(response => response.json());\n};\nexport const updateUser = async (id, username, password, email, token, verified) => {\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified\n  };\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  };\n  return await fetch(\"http://localhost:8000/users/\" + id, requestOptions).then(response => response.json());\n};\nexport const updateSettings = async () => {\n  let settings = {};\n  let id = \"\";\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n    id = JSON.parse(userInfoStorage).userDetails.id;\n  }\n\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(settings)\n  };\n  return await fetch(\"http://localhost:8000/settings/\" + id, requestOptions).then(response => console.log(response.json()));\n};\nexport const addUserSettings = async id => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      published: false,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      },\n      contact: {\n        info: {\n          phoneNumber: \"\",\n          email: \"\"\n        },\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\"\n        }\n      }\n    })\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(response => response.json());\n};\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then(response => response.json());\n};\nexport const getUserDetails = async userId => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then(response => response.json());\n};\nexport const getUserTemplates = async userId => {\n  return await fetch(\"http://localhost:8000/templates/userID=\" + userId).then(response => response.json());\n};\nexport const getUserSettings = async userId => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(response => response.json());\n};\nexport const getUserInfo = async userId => {\n  let user = {\n    userDetails: {},\n    userTemplates: []\n  };\n  await getUserDetails(userId).then(response => {\n    user.userDetails = response;\n  });\n  await getUserTemplates(userId).then(response => {\n    user.userTemplates = response;\n  });\n  return user;\n};","map":{"version":3,"sources":["/home/ma/git/OpenCV/src/services/HTTPContext.ts"],"names":["v4","uuidv4","addUser","username","password","email","token","verified","id","body","requestOptions","method","headers","Accept","JSON","stringify","fetch","then","response","json","addTemplate","userID","templateIndex","updateUser","updateSettings","settings","userInfoStorage","sessionStorage","getItem","parse","userSettings","userDetails","console","log","addUserSettings","published","personal_details","text","fontSize","textPosition","textColor","education","sections","experience","skills","projects","languages","contact","info","phoneNumber","getUsers","getUserDetails","userId","getUserTemplates","getUserSettings","getUserInfo","user","userTemplates"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GlobalContext } from \"./AppContext\";\n\nexport const addUser = async (\n  username: string,\n  password: string,\n  email: string,\n  token: string,\n  verified: boolean\n) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified,\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\"http://localhost:8000/users/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const addTemplate = async (userID: string, templateIndex: string) => {\n  const id = uuidv4();\n  const body = {\n    id: id,\n    userID: userID,\n    templateIndex: templateIndex,\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\"http://localhost:8000/templates/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const updateUser = async (\n  id: string,\n  username: string,\n  password: string,\n  email: string,\n  token: string,\n  verified: boolean\n) => {\n  const body = {\n    id: id,\n    username: username,\n    password: password,\n    email: email,\n    token: token,\n    verified: verified,\n  };\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  };\n  return await fetch(\"http://localhost:8000/users/\" + id, requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const updateSettings = async () => {\n  let settings = {};\n  let id = \"\";\n  const userInfoStorage = sessionStorage.getItem(\"info\");\n  if (userInfoStorage !== null) {\n    settings = JSON.parse(userInfoStorage).userSettings;\n    id = JSON.parse(userInfoStorage).userDetails.id;\n  }\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(settings),\n  };\n  return await fetch(\n    \"http://localhost:8000/settings/\" + id,\n    requestOptions\n  ).then((response) => console.log(response.json()));\n};\n\nexport const addUserSettings = async (id: string) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      id: id,\n      templateIndex: 1,\n      published: false,\n      personal_details: {\n        text: \"\",\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      education: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      experience: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      skills: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      projects: {\n        text: \"\",\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      languages: {\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n      contact: {\n        info: {\n          phoneNumber: \"\",\n          email: \"\",\n        },\n        sections: [],\n        settings: {\n          fontSize: \"text-lg\",\n          textPosition: \"justify-start\",\n          textColor: \"#000000\",\n        },\n      },\n    }),\n  };\n  return await fetch(\"http://localhost:8000/settings/\", requestOptions).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUsers = async () => {\n  return await fetch(\"http://localhost:8000/users\").then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserDetails = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/users/\" + userId).then((response) =>\n    response.json()\n  );\n};\n\nexport const getUserTemplates = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/templates/userID=\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserSettings = async (userId: string) => {\n  return await fetch(\"http://localhost:8000/settings/\" + userId).then(\n    (response) => response.json()\n  );\n};\n\nexport const getUserInfo = async (userId: string) => {\n  let user = {\n    userDetails: {},\n    userTemplates: [],\n  };\n\n  await getUserDetails(userId).then((response) => {\n    user.userDetails = response;\n  });\n\n  await getUserTemplates(userId).then((response) => {\n    user.userTemplates = response;\n  });\n  return user;\n};\n"]},"metadata":{},"sourceType":"module"}